{"version":3,"file":"944.0df5756a.iframe.bundle.js","mappings":";;;;;;;AA6DA;AAYA;AAIA;AACA;AAOA","sources":["webpack://@melfore/mosaic/./src/components/Icon/index.tsx"],"sourcesContent":["import React, { cloneElement, FC, PropsWithChildren, ReactElement, useCallback, useMemo } from \"react\";\nimport { ClassNames } from \"@emotion/react\";\nimport { keyframes, Skeleton as MUISkeleton } from \"@mui/material\";\n\nimport { IIcon, IIconDimensions, IRenderedIcon } from \"../../types/Icon\";\nimport { logWarn } from \"../../utils/logger\";\nimport Adornment from \"../Adornment\";\n\nimport { iconsCatalog } from \"./utils\";\n\nexport const DATA_CY_DEFAULT = \"icon\";\n\nconst ICON_DIMENSIONS: IIconDimensions = {\n  small: 20,\n  medium: 24,\n  large: 35,\n};\n\nconst Icon: FC<PropsWithChildren<IIcon>> = ({\n  badge,\n  children,\n  dataCy = DATA_CY_DEFAULT,\n  forwarded = {},\n  loading = false,\n  name,\n  rotate = false,\n  size = \"medium\",\n  style: externalStyle,\n  tooltip,\n}) => {\n  const dimensions = useMemo(() => {\n    const dimension = ICON_DIMENSIONS[size];\n    return { height: dimension, width: dimension };\n  }, [size]);\n\n  const props = useMemo(() => {\n    let props: IRenderedIcon = {\n      ...forwarded,\n      \"data-cy\": dataCy,\n      fontSize: size,\n    };\n\n    if (externalStyle) {\n      props = { ...props, style: { ...externalStyle } };\n    }\n\n    if (children) {\n      props = { ...props, style: { ...props.style, ...dimensions } };\n    }\n\n    return props;\n  }, [children, dataCy, dimensions, externalStyle, forwarded, size]);\n\n  const rotateKeyframes = useMemo(\n    () => keyframes`\n      from: {\n        transform: \"rotate(0deg)\";\n      }\n      to: {\n        transform: \"rotate(360deg)\";\n      }\n  `,\n    []\n  );\n\n  const renderWithAnimation = useCallback(\n    (element: any) => {\n      return (\n        <ClassNames>\n          {({ css }) => {\n            let animation = \"none\";\n            if (rotate) {\n              animation = css`\n                ${rotateKeyframes} 2s linear infinite\n              `;\n            }\n\n            let className = css`\n              animation: ${animation};\n            `;\n\n            if (forwarded.className) {\n              className = forwarded.className;\n            }\n\n            return (\n              <Adornment badge={badge} tooltip={tooltip}>\n                {cloneElement(element as ReactElement<any>, { ...props, className })}\n              </Adornment>\n            );\n          }}\n        </ClassNames>\n      );\n    },\n    [badge, forwarded, props, rotate, rotateKeyframes, tooltip]\n  );\n\n  if (loading) {\n    return <MUISkeleton variant=\"rectangular\" style={{ ...dimensions }} />;\n  }\n\n  if (children) {\n    return renderWithAnimation(children);\n  }\n\n  if (!name) {\n    logWarn(\"Icon\", \"Skip rendering, both children and name are not set\");\n    return null;\n  }\n\n  const icon = iconsCatalog[name];\n  return renderWithAnimation(icon);\n};\n\nexport default Icon;\n"],"names":[],"sourceRoot":""}